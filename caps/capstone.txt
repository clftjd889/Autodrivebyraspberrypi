구현한 기능들 
1) 차선인식 자율주행
2) 색검출을 통한 신호, 버스정류장 인식
3) 초음파 센서로 장애물 인식
4) SSH를 통한 라즈베리파이의 원격제어


구현하지 못하거나 않은 기능
1) CUDA
2) Firmata
3) socket 통신
4) bird eye view

1) 차선인식 자율주행

1. HSV(Hue, Saturation, Value) 를 통한 색상, 채도, 명도, 분류 후 원하는 색 검출
2. 그레이 스케일을 통해 색깔의 모서리 검출
3. 모서리에서 직선 검출
4. ROI(Region of Interest)를 통한 검출할 영역 설정
5. 왼쪽과 오른쪽 영역을 나누어 직선 검출
6. 왼쪽과 오른쪽의 직선의 각도와 거리를 계산한 후 중앙에서의 거리 검출
7. ASCII코드를 이용한 간단한 통신으로 라즈베리파이에서 도로 주행에 필요한 연산값을 시리얼 통신을 통해 아두이노에 전달


2) 색검출을 통한 신호, 버스정류장 인식

1 ~ 4. 주행과 같음
5. 윗쪽 영역에 붉은색을 감지하면 멈추는 신호를 시리얼 통신을 통해 아두이노에 송신


3) 초음파 센서로 장애물 인식
-......


구현하지 못한 기능
1) CUDA("Compute Unified Device Architecture", 쿠다)
 - 위 기능은 GPU(그래픽 처리 장치)에서 수행하는 알고리즘을 프로그래밍 언어에 맞춰 사용할 수 있도록 하는 기술.
 - 주행을 위해서는 노트북으로 위 작업을 수행해야 하나 현재 사용중인 노트북의 성능상 구현 불가

2) Firmata
 - 아두이노와 라즈베리파이의 통신방법 중 하나
 - 모터를 제어하는 것이 라즈베리파이가 아닌 아두이노이기 때문에 편의상 시리얼 통신을 사용

3) socket 통신
 - 라즈베리파이와 컴퓨터가 같은 네트워크 환경에 있을 때 프로그램 언어로 서로 정보를 주고받을 수 있는 통신환경 중 하나
 - socket 통신을 할 경우 영상을 엔코드하여 노트북에 보내서 디코드를 하는데 통신환경에 따라서 지연이 생겨서 패스


4)bird eye view
 - '마치 새가 도로를 보고 있는 듯한'형식으로 도로에서 읽어온 값을 직선으로 검출
 - 현재 주행하는 트랙과 버스의 고도차와 변수를 줄이기 위해서 사용하지 않음


시행착오
카메라 한대로 도로의 신호와 차선을 모두 인식하기 위해서 약간의 문제가 발생
1. 버스가 정면 15cm앞의 차선밖에 인식을 못함
 - 이로인해 코너링에서 도로가 보이지 않는 문제가 발생, 이는 이전에 라즈베리파이에서 읽어온 값을 그대로 실행하여 차선이 보이지 않더라도 차선이 어떤 형태인지 예상을 하며 주행
